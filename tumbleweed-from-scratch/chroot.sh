#!/usr/bin/env bash
set -euo pipefail

# Source variables and shit
source /root/install.conf
systemctl start NetworkManager

# --- Set hostname ---
echo "$hostname" >/etc/hostname
echo "127.0.0.1  localhost" >/etc/hosts
echo "::1        localhost" >>/etc/hosts
echo "127.0.1.1  $hostname.localdomain  $hostname" >>/etc/hosts

# Local Setup
ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime
hwclock --systohc
localectl set-locale LANG=en_US.UTF-8
echo "LANG=en_US.UTF-8" >/etc/locale.conf

# Sudo Configuration
echo "%wheel ALL=(ALL) ALL" >/etc/sudoers.d/wheel
echo "Defaults timestamp_timeout=30" >/etc/sudoers.d/timestamp
echo "Defaults pwfeedback" >/etc/sudoers.d/pwfeedback
chmod 440 /etc/sudoers.d/*

# Tlp setup
# Robust detection: prefer explicit pstate driver dirs if present, fallback to scaling_driver text
scaling_f="/sys/devices/system/cpu/cpu0/cpufreq/scaling_driver"
pstate_supported=false
driver=""
if [ -d /sys/devices/system/cpu/intel_pstate ]; then
  driver="intel_pstate"
  pstate_supported=true
elif [ -d /sys/devices/system/cpu/amd_pstate ] || [ -d /sys/devices/system/cpu/amd-pstate ]; then
  # kernel docs and kernels may expose amd_pstate/amd-pstate; accept either
  driver="amd_pstate"
  pstate_supported=true
elif [ -r "$scaling_f" ]; then
  # fallback: read scaling_driver and normalise
  rawdrv=$(cat "$scaling_f" 2>/dev/null || true)
  case "$rawdrv" in
  *intel* | intel_pstate | intel-pstate)
    driver="intel_pstate"
    pstate_supported=true
    ;;
  *amd* | amd_pstate | amd-pstate)
    driver="amd_pstate"
    pstate_supported=true
    ;;
  *) driver="$rawdrv" ;;
  esac
fi

# Kernel parameter to encourage pstate driver mode on next boot (set only when pstate is supported)
pstate_param=""
if [ "$pstate_supported" = true ]; then
  if [ "$driver" = "intel_pstate" ]; then
    # prefer 'active' for AC; we'll keep TLP switching to 'passive' on BAT to allow schedutil there.
    pstate_param="intel_pstate=active"
  elif [ "$driver" = "amd_pstate" ]; then
    # amd_pstate supports active/passive/guided depending on kernel; active is a reasonable default.
    pstate_param="amd_pstate=active"
  fi
fi

# Write base TLP config (safe defaults; adjust values below if you want more aggressive perf)
if [[ "$extra" == "laptop" ]]; then
  cat >/etc/tlp.conf <<EOF
# Generated by installer - baseline TLP config
PLATFORM_PROFILE_ON_AC=performance
PLATFORM_PROFILE_ON_BAT=low-power

# PCIe ASPM: prefer default on AC (don't force performance), aggressive on battery
PCIE_ASPM_ON_AC=default
PCIE_ASPM_ON_BAT=powersupersave

USB_AUTOSUSPEND=1
USB_EXCLUDE_BTUSB=0
USB_EXCLUDE_PHONE=1

# Runtime PM (use new name)
RUNTIME_PM_ON_AC=on
RUNTIME_PM_ON_BAT=auto
RUNTIME_PM_DRIVER_DENYLIST="amdgpu nouveau nvidia"

WIFI_PWR_ON_AC=off
WIFI_PWR_ON_BAT=on

SOUND_POWER_SAVE_ON_AC=0
SOUND_POWER_SAVE_ON_BAT=1

DISK_APM_LEVEL_ON_AC="254 254"
DISK_APM_LEVEL_ON_BAT="128 128"

# Per-disk IO scheduler: use mq-deadline as safe default (leave kernel default with 'keep')
DISK_IOSCHED="mq-deadline"

SATA_LINKPWR_ON_AC=max_performance
SATA_LINKPWR_ON_BAT=min_power

# Charging thresholds (only functional if tlp-rdw and hardware support)
START_CHARGE_THRESH_BAT0=40
STOP_CHARGE_THRESH_BAT0=80
EOF

  # CPU-specific settings by driver
  if [ "$driver" = "intel_pstate" ]; then
    # Use 'active' for AC (intel internal algorithms), use 'passive' on BAT so schedutil can be selected
    cat >>/etc/tlp.conf <<EOF
# Intel pstate tuning
CPU_DRIVER_OPMODE_ON_AC=active
CPU_DRIVER_OPMODE_ON_BAT=passive
CPU_SCALING_GOVERNOR_ON_AC=performance
CPU_SCALING_GOVERNOR_ON_BAT=schedutil
CPU_ENERGY_PERF_POLICY_ON_AC=performance
CPU_ENERGY_PERF_POLICY_ON_BAT=balance_power
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF

  elif [ "$driver" = "amd_pstate" ]; then
    # For AMD: prefer active when the new energy/CPP features exist, otherwise fall back to using schedutil
    if [ -f /sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference ]; then
      cat >>/etc/tlp.conf <<EOF
# AMD pstate with energy perf preference support
CPU_DRIVER_OPMODE_ON_AC=active
CPU_DRIVER_OPMODE_ON_BAT=active
CPU_SCALING_GOVERNOR_ON_AC=performance
CPU_SCALING_GOVERNOR_ON_BAT=powersave
CPU_ENERGY_PERF_POLICY_ON_AC=performance
CPU_ENERGY_PERF_POLICY_ON_BAT=power
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF
    else
      cat >>/etc/tlp.conf <<EOF
# AMD pstate older kernels - keep schedutil
CPU_DRIVER_OPMODE_ON_AC=passive
CPU_DRIVER_OPMODE_ON_BAT=passive
CPU_SCALING_GOVERNOR_ON_AC=schedutil
CPU_SCALING_GOVERNOR_ON_BAT=schedutil
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF
    fi

  else
    # Generic fallback: use schedutil both AC/BAT
    cat >>/etc/tlp.conf <<EOF
# Generic CPUfreq fallback
CPU_DRIVER_OPMODE_ON_AC=passive
CPU_DRIVER_OPMODE_ON_BAT=passive
CPU_SCALING_GOVERNOR_ON_AC=schedutil
CPU_SCALING_GOVERNOR_ON_BAT=schedutil
CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0
EOF
  fi
fi

# Boot Manager setup
cat >/etc/dracut.conf.d/crypt.conf <<'EOF'
add_dracutmodules+=" crypt "
# optionally force use_fstab/use_crypttab if needed:
# use_fstab="yes"
# use_crypttab="yes"
EOF

dracut -f

if [[ "$encryption" == "no" ]]; then
  GRUB_CMDLINE="root=${part2} rw quiet splash fsck.repair=yes zswap.enabled=0 ${pstate_param:-}"
else
  uuid=$(blkid -s UUID -o value "$part2")
  GRUB_CMDLINE="rd.luks.name=${uuid}=cryptroot root=/dev/mapper/cryptroot rw quiet splash fsck.repair=yes zswap.enabled=0 ${pstate_param:-}"
fi
if [[ "$howMuch" == "max" ]]; then
  sed -i 's/\(GRUB_CMDLINE_LINUX_DEFAULT="[^"]*\)/\1 security=selinux selinux=1 enforcing=0/' /etc/default/grub
  cat >/etc/selinux/config <<'EOF'
SELINUX=permissive
SELINUXTYPE=targeted
EOF
fi

cat >/etc/default/grub <<EOF
GRUB_DEFAULT=0
GRUB_TIMEOUT=3
GRUB_DISTRIBUTOR="openSUSE"
GRUB_CMDLINE_LINUX="${GRUB_CMDLINE}"
GRUB_DISABLE_OS_PROBER=false
EOF
grub2-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub2-mkconfig -o /boot/grub2/grub.cfg

# Copy config and dotfiles as the user
if [[ "$howMuch" == "max" ]]; then
  npm install -g corepack@latest
  su - "$username" -c '
    mkdir -p ~/Documents/projects/default
    # Clone scripts
    git clone https://github.com/zedonix/scripts.git ~/Documents/projects/default/scripts
    git clone https://github.com/zedonix/dotfiles.git ~/Documents/projects/default/dotfiles
    git clone https://github.com/zedonix/archsetup.git ~/Documents/projects/default/archsetup
    git clone https://github.com/zedonix/notes.git ~/Documents/projects/default/notes
    git clone https://github.com/zedonix/GruvboxGtk.git ~/Documents/projects/default/GruvboxGtk
    git clone https://github.com/zedonix/GruvboxQT.git ~/Documents/projects/default/GruvboxQT

  # External installation
  # Iosevka
  mkdir -p ~/.local/share/fonts/iosevka
  cd ~/.local/share/fonts/iosevka
  curl -LO https://github.com/ryanoasis/nerd-fonts/releases/latest/download/IosevkaTerm.zip
  unzip IosevkaTerm.zip
  rm IosevkaTerm.zip

  # Rustup
  # source $HOME/.cargo/env
  export PATH="$HOME/.cargo/bin:$PATH"
  rustup default stable
  rustup update stable

  # Other package managers
  corepack enable
  corepack prepare pnpm@latest --activate
  pipx ensurepath
  pipx install thefuck
  pipx runpip thefuck install setuptools
  pipx install unp
  cargo install caligula
  '
  # wl-clip-persist
  git clone https://github.com/Linus789/wl-clip-persist.git
  cd wl-clip-persist
  cargo build --release
  install -Dm755 target/release/wl-clip-persist /usr/local/bin/wl-clip-persist

  # Root .config
  mkdir -p ~/.config ~/.local/state/bash ~/.local/state/zsh
  echo '[[ -f ~/.bashrc ]] && . ~/.bashrc' >~/.bash_profile
  touch ~/.local/state/zsh/history ~/.local/state/bash/history
  ln -sf /home/$username/Documents/projects/default/dotfiles/.bashrc ~/.bashrc
  ln -sf /home/$username/Documents/projects/default/dotfiles/.zshrc ~/.zshrc
  ln -sf /home/$username/Documents/projects/default/dotfiles/.config/starship.toml ~/.config
  ln -sf /home/$username/Documents/projects/default/dotfiles/.config/nvim/ ~/.config

  # ly config
  # -e 's/^bigclock *= *.*/bigclock = en/' \
  # sed -i \
  #   -e 's/^allow_empty_password *= *.*/allow_empty_password = false/' \
  #   -e 's/^clear_password *= *.*/clear_password = true/' \
  #   -e 's/^clock *= *.*/clock = %a %d\/%m %H:%M/' \
  #   /etc/ly/config.ini

  # Greetd setup for tuigreet
  cp -f /home/$username/Documents/projects/default/dotfiles/config.toml /etc/greetd/

  # Setup Gruvbox theme
  THEME_SRC="/home/$username/Documents/projects/default/GruvboxQT"
  THEME_DEST="/usr/share/Kvantum/Gruvbox"
  mkdir -p "$THEME_DEST"
  cp "$THEME_SRC/gruvbox-kvantum.kvconfig" "$THEME_DEST/Gruvbox.kvconfig"
  cp "$THEME_SRC/gruvbox-kvantum.svg" "$THEME_DEST/Gruvbox.svg"

  THEME_SRC="/home/$username/Documents/projects/default/GruvboxGtk"
  THEME_DEST="/usr/share"
  cp -r "$THEME_SRC/themes/Gruvbox-Material-Dark" "$THEME_DEST/themes"
  cp -r "$THEME_SRC/icons/Gruvbox-Material-Dark" "$THEME_DEST/icons"

  # Anancy-cpp rules
  git clone --depth=1 https://github.com/RogueScholar/ananicy.git
  git clone --depth=1 https://github.com/CachyOS/ananicy-rules.git
  mkdir -p /etc/ananicy.d/roguescholar /etc/ananicy.d/zz-cachyos
  cp -r ananicy/ananicy.d/* /etc/ananicy.d/roguescholar/
  cp -r ananicy-rules/00-default/* /etc/ananicy.d/zz-cachyos/
  cp -r ananicy-rules/00-types.types /etc/ananicy.d/zz-cachyos/
  cp -r ananicy-rules/00-cgroups.cgroups /etc/ananicy.d/zz-cachyos/
  tee /etc/ananicy.d/ananicy.conf >/dev/null <<'EOF'
check_freq = 15
cgroup_load = false
type_load = true
rule_load = true
apply_nice = true
apply_latnice = true
apply_ionice = true
apply_sched = true
apply_oom_score_adj = true
apply_cgroup = true
loglevel = info
log_applied_rule = false
cgroup_realtime_workaround = false
EOF

  # Firefox policy
  mkdir -p /etc/firefox/policies
  ln -sf "/home/$username/Documents/projects/default/dotfiles/policies.json" /etc/firefox/policies/policies.json
fi

su - "$username" -c '
mkdir -p ~/Downloads ~/Desktop ~/Public ~/Templates ~/Videos ~/Pictures/Screenshots/temp ~/.config
mkdir -p ~/Documents/projects/work ~/Documents/projects/sandbox ~/Documents/personal/wiki
mkdir -p ~/.local/bin ~/.cache/cargo-target ~/.local/state/bash ~/.local/state/zsh ~/.local/share/wineprefixes
touch ~/.local/state/bash/history ~/.local/state/zsh/history ~/Documents/personal/wiki/index.txt

  # Copy and link files (only if dotfiles exists)
  if [[ -d ~/Documents/projects/default/dotfiles ]]; then
    cp ~/Documents/projects/default/dotfiles/.config/sway/archLogo.png ~/Pictures/
    cp ~/Documents/projects/default/dotfiles/pics/* ~/Pictures/
    ln -sf ~/Documents/projects/default/dotfiles/.bashrc ~/.bashrc
    ln -sf ~/Documents/projects/default/dotfiles/.zshrc ~/.zshrc

    for link in ~/Documents/projects/default/dotfiles/.config/*; do
      ln -sf "$link" ~/.config/
    done
    for link in ~/Documents/projects/default/dotfiles/.copy/*; do
      cp -r "$link" ~/.config/
    done
    for link in ~/Documents/projects/default/scripts/bin/*; do
      ln -sf "$link" ~/.local/bin/
    done
  git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm
  fi
  '
# Delete variables
shred -u /root/install.conf

# zram config
# Get total memory in MiB
TOTAL_MEM=$(awk '/MemTotal/ {print int($2 / 1024)}' /proc/meminfo)
ZRAM_SIZE=$((TOTAL_MEM / 2))

# Create zram config
mkdir -p /etc/systemd/zram-generator.conf.d
{
  echo "[zram0]"
  echo "zram-size = ${ZRAM_SIZE}"
  echo "compression-algorithm = zstd #lzo-rle"
  echo "swap-priority = 100"
  echo "fs-type = swap"
} >/etc/systemd/zram-generator.conf.d/00-zram.conf

# services
# rfkill unblock bluetooth
# modprobe btusb || true
if [[ "$howMuch" == "max" ]]; then
  systemctl set-default graphical.target
  systemctl enable greetd crond ananicy-cpp sshd
  if [[ "$hardware" == "hardware" ]]; then
    systemctl enable fstrim.timer acpid libvirtd.socket cups ipp-usb docker.socket
    if [[ "$extra" == "laptop" || "$extra" == "bluetooth" ]]; then
      systemctl enable bluetooth
    fi
    if [[ "$extra" == "laptop" ]]; then
      systemctl enable tlp
    fi
  fi
fi
systemctl enable NetworkManager NetworkManager-dispatcher
systemctl disable NetworkManager-wait-online.service
systemctl mask systemd-rfkill systemd-rfkill.socket

# prevent networkmanager from using systemd-resolved
# mkdir -p /etc/networkmanager/conf.d
# printf "[main]\nsystemd-resolved=false\n" | sudo tee /etc/networkmanager/conf.d/no-systemd-resolved.conf

# firewalld setup
# firewall-cmd --set-default-zone=public
firewall-cmd --permanent --remove-service=dhcpv6-client
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
# firewall-cmd --permanent --add-service=ssh
firewall-cmd --permanent --add-service=dns
firewall-cmd --permanent --add-service=dhcp
firewall-cmd --permanent --add-rich-rule='rule family="ipv4" source address="192.168.0.0/24" accept'
firewall-cmd --set-log-denied=all
# Create and assign a zone for virbr0
firewall-cmd --permanent --new-zone=libvirt
firewall-cmd --permanent --zone=libvirt --add-interface=virbr0
# Allow DHCP (ports 67, 68 UDP) and DNS (53 UDP)
# firewall-cmd --permanent --zone=libvirt --add-port=67/udp
# firewall-cmd --permanent --zone=libvirt --add-port=68/udp
# firewall-cmd --permanent --zone=libvirt --add-port=53/udp
# Enable masquerading for routed traffic (NAT)
firewall-cmd --permanent --add-masquerade
firewall-cmd --reload
systemctl enable firewalld
# echo 'net.ipv4.ip_forward = 1' | tee -a /etc/sysctl.d/99-firewalld.conf
# sysctl -p /etc/sysctl.d/99-firewalld.conf
